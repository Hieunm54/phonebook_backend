{"version":3,"sources":["logo.svg","Component/Users.js","Component/Filter.js","Component/Form.js","PhoneService.js","Component/Phone.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","User","user","deleteHandleClick","name","number","onClick","Filter","props","value","search","onChange","searchHandleChange","Form","onSubmit","submit","newUser","nameHandleChange","phone","phoneHandleChange","type","baseURL","axios","get","then","response","data","post","id","delete","Phone","useState","users","setUser","setNewUser","setPhone","setSearch","show","setShow","useEffect","PhoneService","initialPhones","matchUsers","filter","console","log","toLowerCase","includes","event","target","preventDefault","valid","newId","forEach","window","confirm","concat","updateUser","find","newUpdatePhone","put","map","key","deleteUser","open","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e53a5edc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\r\n\r\nconst User = ({user,deleteHandleClick}) => {\r\n    \r\n    \r\n\r\n    return (\r\n        <>\r\n            <li>{user.name} {user.number}</li>\r\n            <button onClick={deleteHandleClick}>Delete</button>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default User;","import React from 'react'\r\n\r\nconst Filter =(props) =>{\r\n    return(\r\n    <div>\r\n        Filter:<input value={props.search} onChange={props.searchHandleChange} />\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default Filter;","import React from 'react'\r\n\r\nconst Form =(props) =>{\r\n    return(\r\n        <form onSubmit={props.submit}>\r\n            <div> name: <input value={props.newUser} onChange={props.nameHandleChange}/></div>\r\n                <div> number: <input value={props.phone} onChange={props.phoneHandleChange}/></div>\r\n                <button type='submit'>add</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default Form;","import axios from 'axios'\r\n\r\nconst baseURL  = 'http://localhost:3001/api/persons';\r\n\r\n\r\nconst getAll = () => {\r\n    // const nonExisting = {\r\n    //     name:'i dont know',\r\n    //     number:'0990909',\r\n    //     id:1000\r\n    // }\r\n    return axios.get(baseURL).then(response => response.data)\r\n}\r\n\r\nconst createNew = (newUser) =>{\r\n    return axios.post(baseURL,newUser).then(response => response.data);\r\n}\r\n\r\nconst deletePhone = (id) =>{\r\n    return axios.delete(`${baseURL}/${id}`);\r\n}\r\n\r\nexport default {getAll,createNew,deletePhone}","import React, { useState, useEffect } from 'react'\r\nimport User from './Users'\r\nimport Filter from './Filter'\r\nimport Form from './Form'\r\nimport axios from 'axios'\r\nimport PhoneService from '../PhoneService'\r\n\r\nconst Phone = () => {\r\n\r\n    const [users, setUser] = useState([]);\r\n    const [newUser, setNewUser] = useState('New user');\r\n    const [phone, setPhone] = useState(0);\r\n    const [search, setSearch] = useState('');\r\n    const [show, setShow] = useState(true);\r\n\r\n    useEffect(() => {\r\n        PhoneService.getAll().then(initialPhones => setUser(initialPhones))\r\n    }, [])\r\n\r\n    const submitHandleSubmit = (event) => {\r\n        event.preventDefault();\r\n        let valid = 1;\r\n        let newId = 0;\r\n        users.forEach(user => {\r\n            if (user.name === newUser) {\r\n                if (window.confirm(`${newUser} is already added to phone book.Do you want to update it ?`)) {\r\n                    valid = 0;\r\n                    newId = user.id;\r\n                } else {\r\n                    valid = 2; // no change applied\r\n                }\r\n            }\r\n            \r\n        })\r\n\r\n        if (valid === 0) {\r\n            console.log(newId)\r\n            const updateUser = users.find(user => user.name === newUser);\r\n            const newUpdatePhone = { ...updateUser, number: phone };\r\n            axios\r\n                .put(`http://localhost:3001/persons/${newId}`, newUpdatePhone)\r\n                .then(response => {\r\n                    setUser(users.map(user => user.name !== newUser ? user : response.data))\r\n                })\r\n            return;\r\n        } else if (valid === 1) {\r\n            const userObject = {\r\n                name: newUser,\r\n                number: phone\r\n                //id : users.length + 1\r\n            }\r\n\r\n            PhoneService.createNew(userObject).then(newUser => {\r\n                setUser(users.concat(newUser));\r\n                setNewUser('');\r\n            })\r\n\r\n            //console.log('button clicked', event.target);\r\n        }\r\n    }\r\n\r\n    const nameHandleChange = (event) => {\r\n        //console.log(event.target.value);\r\n        setNewUser(event.target.value);\r\n\r\n    }\r\n\r\n    const phoneHandleChange = (event) => {\r\n        setPhone(event.target.value);\r\n    }\r\n\r\n\r\n    const searchHandleChange = (event) => {\r\n        setSearch(event.target.value);\r\n        if (event.target.value === '') {\r\n            setShow(true);\r\n        } else {\r\n            setShow(false);\r\n        }\r\n    }\r\n\r\n    const deleteHandleClick = (id) => {\r\n        const deleteUser = users.find(user => user.id === id);\r\n        if (window.confirm(`You want to delete ${deleteUser.name} ?`)) {\r\n            PhoneService.deletePhone(id).then(window.open('exit.html', \"Done\"))\r\n\r\n        }\r\n\r\n    }\r\n\r\n    const matchUsers = show ? users : users.filter(user => {\r\n        console.log('search', (user.name.toLowerCase()).includes(search.toLowerCase()));\r\n        return (user.name.toLowerCase()).includes(search.toLowerCase())\r\n    }\r\n    )\r\n\r\n    //console.log(matchUsers);\r\n\r\n\r\n    return (\r\n        <>\r\n            <h1>Phonebook</h1>\r\n\r\n            <Filter search={search} searchHandleChange={searchHandleChange} />\r\n\r\n            <Form submit={submitHandleSubmit} newUser={newUser} nameHandleChange={nameHandleChange} phone={phone} phoneHandleChange={phoneHandleChange} />\r\n            <div>\r\n                <h2>Number</h2>\r\n                <ul>\r\n                    {matchUsers.map((user) => <User key={user.id} user={user} deleteHandleClick={() => deleteHandleClick(user.id)} />)}\r\n\r\n                </ul>\r\n\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Phone;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Phone from  './Component/Phone'\nfunction App() {\n  return (\n    <div >\n      <Phone />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n      <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}